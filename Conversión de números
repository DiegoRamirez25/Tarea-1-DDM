#include <iostream>
#include <string>
#include <cmath>
#include <map>

using namespace std;

// Función para convertir parte entera a binario
string binario_parte_entera(int numero) {
    string binario = "";
    while (numero > 0) {
        binario = to_string(numero % 2) + binario;
        numero /= 2;
    }
    return binario;
}

// Función para convertir parte entera a octal
string octal_parte_entera(int numero) {
    string octal = "";
    while (numero > 0) {
        octal = to_string(numero % 8) + octal;
        numero /= 8;
    }
    return octal;
}

// Función para convertir parte entera a hexadecimal
string hexadecimal_parte_entera(int numero) {
    string hexadecimal = "";
    map<int, char> mapeo_hex = {
        {10, 'A'}, {11, 'B'}, {12, 'C'}, {13, 'D'}, {14, 'E'}, {15, 'F'}
    };
    while (numero > 0) {
        int digito = numero % 16;
        if (digito > 9) {
            hexadecimal = mapeo_hex[digito] + hexadecimal;
        } else {
            hexadecimal = to_string(digito) + hexadecimal;
        }
        numero /= 16;
    }
    return hexadecimal;
}

// Función para convertir parte decimal a binario
string decimal_a_binario_fraccion(double parte_fraccion) {
    string binario_fraccion = "";
    while (parte_fraccion > 0 && binario_fraccion.length() <= 10) {
        parte_fraccion *= 2;
        if (parte_fraccion >= 1) {
            binario_fraccion += '1';
            parte_fraccion -= 1;
        } else {
            binario_fraccion += '0';
        }
    }
    return binario_fraccion;
}

// Función para convertir parte decimal a octal
string decimal_a_octal_fraccion(double parte_fraccion) {
    string octal_fraccion = "";
    while (parte_fraccion > 0 && octal_fraccion.length() <= 10) {
        parte_fraccion *= 8;
        octal_fraccion += to_string((int)parte_fraccion);
        parte_fraccion -= (int)parte_fraccion;
    }
    return octal_fraccion;
}

// Función para convertir parte decimal a hexadecimal
string decimal_a_hexadecimal_fraccion(double parte_fraccion) {
    string hexadecimal_fraccion = "";
    map<int, char> mapeo_hex = {
        {10, 'A'}, {11, 'B'}, {12, 'C'}, {13, 'D'}, {14, 'E'}, {15, 'F'}
    };
    while (parte_fraccion > 0 && hexadecimal_fraccion.length() <= 10) {
        parte_fraccion *= 16;
        int parte_entera_fraccion = (int)parte_fraccion;
        if (parte_entera_fraccion > 9) {
            hexadecimal_fraccion += mapeo_hex[parte_entera_fraccion];
        } else {
            hexadecimal_fraccion += to_string(parte_entera_fraccion);
        }
        parte_fraccion -= parte_entera_fraccion;
    }
    return hexadecimal_fraccion;
}

// Función para convertir un número binario a decimal
double binario_a_decimal_fraccion(string fraccion_binaria) {
    double decimal_fraccion = 0;
    double potencia = 0.5; // Comenzamos con la potencia de 1/2
    // Recorremos la cadena de la parte fraccionaria de derecha a izquierda
    for (int i = 0; i < fraccion_binaria.length(); ++i) {
        // Si el bit es '1', sumamos la potencia correspondiente
        if (fraccion_binaria[i] == '1') {
            decimal_fraccion += potencia;
        }
        // Dividimos la potencia por 2 para mover el punto decimal a la izquierda
        potencia /= 2;
    }
    return decimal_fraccion;
}
// Función para convertir la parte fraccionaria de un número binario a octal
string binario_a_octal_fraccion(string fraccion_binaria) {
    string octal_fraccion = "";
    // Aseguramos que la longitud de la parte fraccionaria sea múltiplo de 3
    while (fraccion_binaria.length() % 3 != 0) {
        fraccion_binaria += '0'; // Agregamos ceros a la derecha si es necesario
    }
    // Iteramos sobre la parte fraccionaria en grupos de 3 bits
    for (int i = 0; i < fraccion_binaria.length(); i += 3) {
        // Obtenemos el grupo de 3 bits
        string grupo = fraccion_binaria.substr(i, 3);
        // Convertimos el grupo binario a su equivalente octal
        int octal = 0;
        for (int j = 0; j < grupo.length(); ++j) {
            octal = octal * 2 + (grupo[j] - '0');
        }
        octal_fraccion += to_string(octal); // Convertimos el valor entero a string
    }
    return octal_fraccion;
}

// Función para convertir la parte fraccionaria de un número binario a hexadecimal
string binario_a_hexadecimal_fraccion(string fraccion_binaria) {
    string hexadecimal_fraccion = "";
    // Aseguramos que la longitud de la parte fraccionaria sea múltiplo de 4
    while (fraccion_binaria.length() % 4 != 0) {
        fraccion_binaria += '0'; // Agregamos ceros a la derecha si es necesario
    }
    // Iteramos sobre la parte fraccionaria en grupos de 4 bits
    for (int i = 0; i < fraccion_binaria.length(); i += 4) {
        // Obtenemos el grupo de 4 bits
        string grupo = fraccion_binaria.substr(i, 4);
        // Convertimos el grupo binario a su equivalente hexadecimal
        int decimal = 0;
        for (int j = 0; j < grupo.length(); ++j) {
            decimal = decimal * 2 + (grupo[j] - '0');
        }
        if (decimal < 10) {
            hexadecimal_fraccion += to_string(decimal);
        } else {
            hexadecimal_fraccion += 'A' + (decimal - 10);
        }
    }
    return hexadecimal_fraccion;
}

// Función para convertir un número binario a decimal
int binario_a_decimal(string binario) {
    int decimal = 0;
    int potencia = 1;
    // Comenzamos desde el último dígito (menos significativo) y avanzamos hacia la izquierda
    for (int i = binario.length() - 1; i >= 0; --i) {
        // Convertimos cada dígito binario a su equivalente decimal y lo sumamos al resultado
        decimal += (binario[i] - '0') * potencia;
        // Incrementamos la potencia de 2 para el siguiente dígito
        potencia *= 2;
    }
    return decimal;
}

// Función para convertir un número binario a octal
string binario_a_octal(string binario) {
    string octal = "";
    // Añadimos ceros a la izquierda si es necesario para que la longitud del binario sea múltiplo de 3
    while (binario.length() % 3 != 0) {
        binario = "0" + binario;
    }
    // Iteramos sobre cada grupo de 3 dígitos binarios y los convertimos a su equivalente octal
    for (int i = 0; i < binario.length(); i += 3) {
        string grupo = binario.substr(i, 3);
        int valor = stoi(grupo, nullptr, 2);
        octal += to_string(valor);
    }
    return octal;
}

// Función para convertir un número binario a hexadecimal
string binario_a_hexadecimal(string binario) {
    string hexadecimal = "";
    // Añadimos ceros a la izquierda si es necesario para que la longitud del binario sea múltiplo de 4
    while (binario.length() % 4 != 0) {
        binario = "0" + binario;
    }
    // Iteramos sobre cada grupo de 4 dígitos binarios y los convertimos a su equivalente hexadecimal
    for (int i = 0; i < binario.length(); i += 4) {
        string grupo = binario.substr(i, 4);
        int valor = stoi(grupo, nullptr, 2);
        if (valor < 10) {
            hexadecimal += to_string(valor);
        } else {
            hexadecimal += ('A' + valor - 10);
        }
    }
    return hexadecimal;
}


// Función para convertir la parte fraccionaria de un número octal a decimal
double octal_a_decimal_fraccion(string fraccion_octal) {
    double decimal_fraccion = 0;
    double potencia = 1.0 / 8; // Comenzamos con la potencia de 1/8
    // Recorremos la cadena de la parte fraccionaria de izquierda a derecha
    for (int i = 0; i < fraccion_octal.length(); ++i) {
        // Convertimos el dígito octal a su equivalente decimal
        int digito = fraccion_octal[i] - '0';
        // Sumamos el producto del dígito por la potencia correspondiente
        decimal_fraccion += digito * potencia;
        // Dividimos la potencia por 8 para mover el punto decimal a la derecha
        potencia /= 8;
    }
    return decimal_fraccion;
}

// Función para convertir la parte fraccionaria de un número octal a binario
string octal_a_binario_fraccion(string fraccion_octal) {
    string binario_fraccion = "";
    // Iteramos sobre cada dígito de la parte fraccionaria del número octal
    for (char digito : fraccion_octal) {
        // Convertimos el dígito octal a su equivalente binario de 3 bits
        int valor = digito - '0';
        string binario = "";
        for (int i = 0; i < 3; ++i) {
            binario = to_string(valor % 2) + binario; // Concatenamos el bit al principio
            valor /= 2;
        }
        binario_fraccion += binario; // Concatenamos el binario al resultado final
    }
    return binario_fraccion;
}

// Función para convertir la parte fraccionaria de un número octal a hexadecimal
string octal_a_hexadecimal_fraccion(string fraccion_octal) {
    string hexadecimal_fraccion = "";
    // Iteramos sobre cada dígito de la parte fraccionaria del número octal
    for (char digito : fraccion_octal) {
        // Convertimos el dígito octal a su equivalente binario de 3 bits
        int valor = digito - '0';
        string binario = "";
        for (int i = 0; i < 3; ++i) {
            binario = to_string(valor % 2) + binario; // Concatenamos el bit al principio
            valor /= 2;
        }
        // Convertimos el binario a su equivalente hexadecimal
        int decimal = stoi(binario, nullptr, 2);
        char hex = (decimal < 10) ? ('0' + decimal) : ('A' + decimal - 10);
        hexadecimal_fraccion += hex; // Concatenamos el hexadecimal al resultado final
    }
    return hexadecimal_fraccion;
}

// Función para convertir de octal a decimal
int octal_a_decimal(int octal) {
    int decimal = 0, i = 0;
    while(octal != 0) {
        decimal += (octal % 10) * pow(8, i);
        ++i;
        octal /= 10;
    }
    return decimal;
}

// Función para convertir de octal a binario
string octal_a_binario(int octal) {
    string binario = "";
    while(octal != 0) {
        int residuo = octal % 10;
        switch(residuo) {
            case 0: binario = "000" + binario; break;
            case 1: binario = "001" + binario; break;
            case 2: binario = "010" + binario; break;
            case 3: binario = "011" + binario; break;
            case 4: binario = "100" + binario; break;
            case 5: binario = "101" + binario; break;
            case 6: binario = "110" + binario; break;
            case 7: binario = "111" + binario; break;
            default: break;
        }
        octal /= 10;
    }
    return binario;
}

// Función para convertir de octal a hexadecimal
string octal_a_hexadecimal(int octal) {
    string hexadecimal = "";
    while(octal != 0) {
        int residuo = octal % 10;
        switch(residuo) {
            case 0: hexadecimal = "0" + hexadecimal; break;
            case 1: hexadecimal = "1" + hexadecimal; break;
            case 2: hexadecimal = "2" + hexadecimal; break;
            case 3: hexadecimal = "3" + hexadecimal; break;
            case 4: hexadecimal = "4" + hexadecimal; break;
            case 5: hexadecimal = "5" + hexadecimal; break;
            case 6: hexadecimal = "6" + hexadecimal; break;
            case 7: hexadecimal = "7" + hexadecimal; break;
            default: break;
        }
        octal /= 10;
    }
    return hexadecimal;
}

// Función para convertir la parte fraccionaria de un número hexadecimal a decimal
double hexadecimal_a_decimal_fraccion(string fraccion_hexadecimal) {
    double decimal_fraccion = 0;
    double potencia = 1.0 / 16; // Comenzamos con la potencia de 1/16
    // Recorremos la cadena de la parte fraccionaria de derecha a izquierda
    for (int i = fraccion_hexadecimal.length() - 1; i >= 0; --i) {
        // Convertimos el dígito hexadecimal a su equivalente decimal
        int digito;
        if (isdigit(fraccion_hexadecimal[i])) {
            digito = fraccion_hexadecimal[i] - '0';
        } else {
            digito = toupper(fraccion_hexadecimal[i]) - 'A' + 10;
        }
        // Sumamos el producto del dígito por la potencia correspondiente
        decimal_fraccion += digito * potencia;
        // Dividimos la potencia por 16 para mover el punto decimal a la izquierda
        potencia /= 16;
    }
    return decimal_fraccion;
}

// Función para convertir la parte fraccionaria de un número hexadecimal a binario
string hexadecimal_a_binario_fraccion(string fraccion_hexadecimal) {
    string binario_fraccion = "";
    // Iteramos sobre cada dígito de la parte fraccionaria del número hexadecimal
    for (char digito : fraccion_hexadecimal) {
        // Convertimos el dígito hexadecimal a su equivalente binario de 4 bits
        int valor;
        if (isdigit(digito)) {
            valor = digito - '0';
        } else {
            valor = toupper(digito) - 'A' + 10;
        }
        string binario = "";
        for (int i = 0; i < 4; ++i) {
            binario = to_string(valor % 2) + binario; // Concatenamos el bit al principio
            valor /= 2;
        }
        binario_fraccion += binario; // Concatenamos el binario al resultado final
    }
    return binario_fraccion;
}

// Función para convertir la parte fraccionaria de un número hexadecimal a octal
string hexadecimal_a_octal_fraccion(string fraccion_hexadecimal) {
    string octal_fraccion = "";
    // Iteramos sobre cada dígito de la parte fraccionaria del número hexadecimal
    for (char digito : fraccion_hexadecimal) {
        // Convertimos el dígito hexadecimal a su equivalente binario de 4 bits
        int valor;
        if (isdigit(digito)) {
            valor = digito - '0';
        } else {
            valor = toupper(digito) - 'A' + 10;
        }
        string binario = "";
        for (int i = 0; i < 4; ++i) {
            binario = to_string(valor % 2) + binario; // Concatenamos el bit al principio
            valor /= 2;
        }
        // Convertimos el binario a su equivalente octal
        int decimal = stoi(binario, nullptr, 2);
        octal_fraccion += to_string(decimal); // Concatenamos el octal al resultado final
    }
    return octal_fraccion;
}

// Función para convertir un número hexadecimal a decimal
int hexadecimal_a_decimal(string hexadecimal) {
    int decimal = 0;
    int potencia = 1;
    // Comenzamos desde el último dígito (menos significativo) y avanzamos hacia la izquierda
    for (int i = hexadecimal.length() - 1; i >= 0; --i) {
        // Convertimos cada dígito hexadecimal a su equivalente decimal
        int valor;
        if (isdigit(hexadecimal[i])) {
            valor = hexadecimal[i] - '0';
        } else {
            valor = toupper(hexadecimal[i]) - 'A' + 10;
        }
        // Multiplicamos el valor del dígito por la potencia de 16 correspondiente y lo sumamos al resultado
        decimal += valor * potencia;
        // Incrementamos la potencia de 16 para el siguiente dígito
        potencia *= 16;
    }
    return decimal;
}

// Función para convertir un número hexadecimal a binario
string hexadecimal_a_binario(string hexadecimal) {
    string binario = "";
    // Iteramos sobre cada dígito hexadecimal
    for (char digito : hexadecimal) {
        // Convertimos el dígito hexadecimal a su equivalente binario de 4 bits
        int valor;
        if (isdigit(digito)) {
            valor = digito - '0';
        } else {
            valor = toupper(digito) - 'A' + 10;
        }
        // Convertimos el valor a su representación binaria de 4 bits
        for (int i = 3; i >= 0; --i) {
            binario += to_string((valor >> i) & 1);
        }
    }
    return binario;
}

// Función para convertir un número hexadecimal a octal
string hexadecimal_a_octal(string hexadecimal) {
    // Convertimos el número hexadecimal a binario y luego a octal
    string binario = hexadecimal_a_binario(hexadecimal);
    string octal = "";
    // Añadimos ceros a la izquierda si es necesario para que la longitud del binario sea múltiplo de 3
    while (binario.length() % 3 != 0) {
        binario = "0" + binario;
    }
    // Iteramos sobre cada grupo de 3 dígitos binarios y los convertimos a su equivalente octal
    for (int i = 0; i < binario.length(); i += 3) {
        string grupo = binario.substr(i, 3);
        int valor = stoi(grupo, nullptr, 2);
        octal += to_string(valor);
    }
    return octal;
}


// Función para convertir un número decimal a otras bases
void menu_conversion_decimal(double numero) {
    cout << "1. Binario" << endl;
    cout << "2. Octal" << endl;
    cout << "3. Hexadecimal" << endl;
    cout << "\nConvertir a: ";
    int opcion;
    cin >> opcion;
    int parte_entera = (int)numero;
    double parte_fraccion = numero - parte_entera;
    if (opcion == 1) {
        string binario_entero = binario_parte_entera(parte_entera);
        string binario_fraccion = decimal_a_binario_fraccion(parte_fraccion);
        cout << "El número decimal " << numero << " en binario es: " << binario_entero << "." << binario_fraccion << endl << endl;
    } else if (opcion == 2) {
        string octal_entero = octal_parte_entera(parte_entera);
        string octal_fraccion = decimal_a_octal_fraccion(parte_fraccion);
        cout << "El número decimal " << numero << " en octal es: " << octal_entero << "." << octal_fraccion << endl << endl;
    } else if (opcion == 3) {
        string hexadecimal_entero = hexadecimal_parte_entera(parte_entera);
        string hexadecimal_fraccion = decimal_a_hexadecimal_fraccion(parte_fraccion);
        cout << "El número decimal " << numero << " en hexadecimal es: " << hexadecimal_entero << "." << hexadecimal_fraccion << endl << endl;
    }
}

void menu_conversion_binario(string numero_binario) {
    cout << "1. Decimal" << endl;
    cout << "2. Octal" << endl;
    cout << "3. Hexadecimal" << endl;
    cout << "\nConvertir a: ";
    int opcion;
    cin >> opcion;

    switch (opcion) {
        case 1: {
            // Convertir a decimal y mostrar el resultado
            int parte_entera_decimal = binario_a_decimal(numero_binario.substr(0, numero_binario.find('.')));
            double parte_fraccion_decimal = binario_a_decimal_fraccion(numero_binario.substr(numero_binario.find('.') + 1));
            cout << "El número binario " << numero_binario << " en decimal es: " << parte_entera_decimal + parte_fraccion_decimal << endl << endl;
            break;
        }
        case 2: {
            // Convertir a octal y mostrar el resultado
            string parte_entera_octal = binario_a_octal(numero_binario.substr(0, numero_binario.find('.')));
            string parte_fraccion_octal = binario_a_octal_fraccion(numero_binario.substr(numero_binario.find('.') + 1));
            cout << "El número binario " << numero_binario << " en octal es: " << parte_entera_octal << "." << parte_fraccion_octal << endl << endl;
            break;
        }
        case 3: {
            // Convertir a hexadecimal y mostrar el resultado
            string parte_entera_hexadecimal = binario_a_hexadecimal(numero_binario.substr(0, numero_binario.find('.')));
            string parte_fraccion_hexadecimal = binario_a_hexadecimal_fraccion(numero_binario.substr(numero_binario.find('.') + 1));
            cout << "El número binario " << numero_binario << " en hexadecimal es: " << parte_entera_hexadecimal << "." << parte_fraccion_hexadecimal << endl << endl;
            break;
        }
        default:
            cout << "Opción no válida." << endl << endl;
    }
}

void menu_conversion_octal(string numero_octal) {
    cout << "1. Decimal" << endl;
    cout << "2. Binario" << endl;
    cout << "3. Hexadecimal" << endl;
    cout << "\nConvertir a: ";
    int opcion;
    cin >> opcion;

    switch (opcion) {
        case 1: {
            // Convertir a decimal y mostrar el resultado
            int parte_entera_decimal = octal_a_decimal_fraccion(numero_octal.substr(0, numero_octal.find('.')));
            double parte_fraccion_decimal = octal_a_decimal_fraccion(numero_octal.substr(numero_octal.find('.') + 1));
            cout << "El número octal " << numero_octal << " en decimal es: " << parte_entera_decimal + parte_fraccion_decimal << endl << endl;
            break;
        }
        case 2: {
            // Convertir a binario y mostrar el resultado
            string parte_entera_binaria = octal_a_binario_fraccion(numero_octal.substr(0, numero_octal.find('.')));
            string parte_fraccion_binaria = octal_a_binario_fraccion(numero_octal.substr(numero_octal.find('.') + 1));
            cout << "El número octal " << numero_octal << " en binario es: " << parte_entera_binaria << "." << parte_fraccion_binaria << endl << endl;
            break;
        }
        case 3: {
            // Convertir a hexadecimal y mostrar el resultado
            string parte_entera_hexadecimal = octal_a_hexadecimal_fraccion(numero_octal.substr(0, numero_octal.find('.')));
            string parte_fraccion_hexadecimal = octal_a_hexadecimal_fraccion(numero_octal.substr(numero_octal.find('.') + 1));
            cout << "El número octal " << numero_octal << " en hexadecimal es: " << parte_entera_hexadecimal << "." << parte_fraccion_hexadecimal << endl << endl;
            break;
        }
        default:
            cout << "Opción no válida." << endl << endl;
    }
}


// Función para convertir un número hexadecimal a otras bases
void menu_conversion_hexadecimal(string numero_hexadecimal) {
    cout << "1. Decimal" << endl;
    cout << "2. Binario" << endl;
    cout << "3. Octal" << endl;
    cout << "\nConvertir a: ";
    int opcion;
    cin >> opcion;

    switch (opcion) {
        case 1: {
            // Convertir a decimal y mostrar el resultado
            int parte_entera_decimal = hexadecimal_a_decimal(numero_hexadecimal.substr(0, numero_hexadecimal.find('.')));
            double parte_fraccion_decimal = hexadecimal_a_decimal_fraccion(numero_hexadecimal.substr(numero_hexadecimal.find('.') + 1));
            cout << "El número hexadecimal " << numero_hexadecimal << " en decimal es: " << parte_entera_decimal + parte_fraccion_decimal << endl << endl;
            break;
        }
        case 2: {
            // Convertir a binario y mostrar el resultado
            string parte_entera_binaria = hexadecimal_a_binario(numero_hexadecimal.substr(0, numero_hexadecimal.find('.')));
            string parte_fraccion_binaria = hexadecimal_a_binario_fraccion(numero_hexadecimal.substr(numero_hexadecimal.find('.') + 1));
            cout << "El número hexadecimal " << numero_hexadecimal << " en binario es: " << parte_entera_binaria << "." << parte_fraccion_binaria << endl << endl;
            break;
        }
        case 3: {
            // Convertir a octal y mostrar el resultado
            string parte_entera_octal = hexadecimal_a_octal(numero_hexadecimal.substr(0, numero_hexadecimal.find('.')));
            string parte_fraccion_octal = hexadecimal_a_octal_fraccion(numero_hexadecimal.substr(numero_hexadecimal.find('.') + 1));
            cout << "El número hexadecimal " << numero_hexadecimal << " en octal es: " << parte_entera_octal << "." << parte_fraccion_octal << endl << endl;
            break;
        }
        default:
            cout << "Opción no válida." << endl << endl;
    }
}


// Función para mostrar el menú principal
void mostrar_menu() {
    cout << "------- BIENVENIDO -------" << endl;
    cout << "1. Numero Decimal" << endl;
    cout << "2. Numero Binario" << endl;
    cout << "3. Numero Octal" << endl;
    cout << "4. Numero Hexadecimal" << endl;
    cout << "5. Salir" << endl;
}

// Función principal
int main() {
    int opcion;
    double numero_decimal;
    string numero_binario, numero_octal, numero_hexadecimal;
    
    do {
        mostrar_menu();
        cout << "Seleccione una opción: ";
        cin >> opcion;
        
        switch(opcion) {
            case 1:
                cout << "Ingrese un número decimal: ";
                cin >> numero_decimal;
                menu_conversion_decimal(numero_decimal);
                break;
            case 2:
                cout << "Ingrese un número binario: ";
                cin >> numero_binario;
                menu_conversion_binario(numero_binario);
                break;
            case 3:
                cout << "Ingrese un número octal: ";
                cin >> numero_octal;
                menu_conversion_octal(numero_octal);
                break;
            case 4:
                cout << "Ingrese un número hexadecimal: ";
                cin >> numero_hexadecimal;
                menu_conversion_hexadecimal(numero_hexadecimal);
                break;
            case 5:
                cout << "Saliendo del programa." << endl;
                break;
            default:
                cout << "Opción no válida. Intente de nuevo." << endl;
        }
        
    } while(opcion != 5);
    
    return 0;
}


